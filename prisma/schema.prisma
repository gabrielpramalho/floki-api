generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  avatarUrl    String?  @map("avatar_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  tokens   Token[]
  projects Project[]

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

enum StatusProject {
  BACKLOG
  DEVELOPING
  PRODUCTION
  ARCHIVED
}

model Project {
  id            String        @id @default(uuid())
  title         String
  description   String
  githubURL     String?
  productionURL String?
  imageURL      String?
  status        StatusProject

  ownerId String
  user    User   @relation(fields: [ownerId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  links     Link[]
  notes     Note[]

  @@map("projects")
}

model Link {
  id        String   @id @default(uuid())
  title     String
  url       String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String   @map("project_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("links")
}

model Note {
  id    String @id @default(uuid())
  title String
  text  String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  project   Project @relation(fields: [projectId], references: [id])
  projectId String  @map("project_id")

  @@map("notes")
}
